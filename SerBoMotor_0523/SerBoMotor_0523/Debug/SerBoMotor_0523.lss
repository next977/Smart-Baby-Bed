
SerBoMotor_0523.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001fa  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000129  00000000  00000000  000003ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000180  00000000  00000000  00000513  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000694  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001bc  00000000  00000000  000006c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002e  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000008b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	34 c0       	rjmp	.+104    	; 0x104 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
}

void main (void)
{

	TCCR3A = 0x82; //FAST PWM mode 14번 설정, top값 ICR1으로 제어가능모드임, OC1A만 1 0을 설정.
  9e:	82 e8       	ldi	r24, 0x82	; 130
  a0:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	TCCR3B = 0x1B;	//oc1A 1 0 으로 설정했기 때문에, TCNT값이 top일때 OC1A는 0, OCR1A과 매칭이됬을때 OC1a는 1로 펄스를 설정!
  a4:	8b e1       	ldi	r24, 0x1B	; 27
  a6:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	TCNT3L = 0x00; // low 비트 0으로 초기화 
  aa:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCNT3H = 0x00; // hihg 비트 0으로 초기화
  ae:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	ICR3=4999; //0부터 4999까지 세고 다시 0으로 초기화가 되므로 총 5000개;
  b2:	87 e8       	ldi	r24, 0x87	; 135
  b4:	93 e1       	ldi	r25, 0x13	; 19
  b6:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  ba:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	OCR3A=0;	//초기값 0으로 설정.
  be:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  c2:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	SERBO_DDR   = 0x08; //PORTE 3번핀 OC3A핀만 출력으로 사용.
  c6:	88 e0       	ldi	r24, 0x08	; 8
  c8:	82 b9       	out	0x02, r24	; 2
								0.01ms 이고, 이것으로 -90도는 0.6ms , 0도 1.5ms , +90도 2.4ms이다.
								(1+4999)ICR값 *2.4ms/20ms=600 (+90도)OCR1값
								0.1ms만큼의 폭을 알기위해서 600/24=25 ,이므로 0.6ms(-90도), 1.5ms(0도), 2.4ms(+90도)
								는 150,375,600이다. 이것들로 인한 공식은
								OCR1A = (600-375)*x/90 +375    =225*x/90 + 375 이다. x에 우리가 원하는 각을 쓰면된다.*/
	OCR3A=pulse;
  ca:	e6 e8       	ldi	r30, 0x86	; 134
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	27 e7       	ldi	r18, 0x77	; 119
  d0:	31 e0       	ldi	r19, 0x01	; 1
  d2:	8d e0       	ldi	r24, 0x0D	; 13
  d4:	92 e0       	ldi	r25, 0x02	; 2
  d6:	31 83       	std	Z+1, r19	; 0x01
  d8:	20 83       	st	Z, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	4f ef       	ldi	r20, 0xFF	; 255
  dc:	53 ed       	ldi	r21, 0xD3	; 211
  de:	60 e3       	ldi	r22, 0x30	; 48
  e0:	41 50       	subi	r20, 0x01	; 1
  e2:	50 40       	sbci	r21, 0x00	; 0
  e4:	60 40       	sbci	r22, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x42>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x4c>
  ea:	00 00       	nop
  ec:	91 83       	std	Z+1, r25	; 0x01
  ee:	80 83       	st	Z, r24
  f0:	4f ef       	ldi	r20, 0xFF	; 255
  f2:	53 ed       	ldi	r21, 0xD3	; 211
  f4:	60 e3       	ldi	r22, 0x30	; 48
  f6:	41 50       	subi	r20, 0x01	; 1
  f8:	50 40       	sbci	r21, 0x00	; 0
  fa:	60 40       	sbci	r22, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x58>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x62>
 100:	00 00       	nop
 102:	e9 cf       	rjmp	.-46     	; 0xd6 <main+0x38>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
